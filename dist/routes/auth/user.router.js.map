{"version":3,"file":"user.router.js","sourceRoot":"/","sources":["routes/auth/user.router.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Request, Response } from 'express';\nimport { IAppContext } from '../../types/app';\nimport setContext from '../../middlewares/context';\nimport { appContext } from '../../start';\n\nconst router = express.Router();\n\nrouter.post('/register', async (req: Request, res: Response) => {\n  try {\n    const user = await appContext.services.UserService.registerUser(req.body);\n    res.status(201).json({ user });\n  } catch(e) {\n    res.status(500).send('error creating user');\n  }\n});\nrouter.post('/verify', async(req: Request, res: Response) => {\n  try {\n    const response = await appContext.services.UserService.verifyUser(req.body);\n    res.status(200).json(response);\n  } catch (e) {\n    res.status(500).send('error verifying user');\n  }\n});\nrouter.post('/forgotpassword', async(req: Request, res: Response) => {\n  try {\n    const response = await appContext.services.UserService.forgotPassword(req.body);\n    res.status(200).json(response);\n  } catch (e) {\n    res.status(500).send('error reseting password');\n  }\n});\nrouter.post('/resetpassword', async(req: Request, res: Response) => {\n  try {\n    const response = await appContext.services.UserService.resetPassword(req.body);\n    res.status(200).json(response);\n  } catch (e) {\n    res.status(500);\n  }\n});\nrouter.post('/login', async(req: Request, res: Response) => {\n  try {\n    const user = await appContext.services.UserService.loginUser(req.body);\n    res.status(200).json(user);\n  } catch (e) {\n    res.status(500);\n  }\n});\nrouter.put('/updateuser', setContext, async(req: Request & { user: any }, res: Response) => {\n  try {\n    const user = await appContext.services.UserService.updateUser(req.body, req.user._id);\n    res.status(200).json(user);\n  } catch (e) {\n    res.status(500);\n  }\n});\nrouter.delete('/deleteuser', (req: Request & { user: any }, res: Response) => {\n  try {\n    const message = appContext.services.UserService.deleteUser(req.user);\n    res.status(201).json(message);\n  } catch (e) {\n    res.status(500).json({ error: e });\n  }\n});\nrouter.post('/updateprofilepicture', (req: Request & { user: any }, res: Response) => {\n  try {\n    const message = appContext.services.UserService.updateProfilePicture(req.user);\n    res.status(201).json(message);\n  } catch (e) {\n    res.status(500).json({ error: e });\n  }\n});\nrouter.get('/getuserrating', (req: Request & { user: any }, res: Response) => {\n  try {\n    const rating = appContext.services.UserService.getUserRating(req.user);\n    res.status(201).json(rating);\n  } catch (e) {\n    res.status(500).json({ error: e });\n  }\n});\n\nexport default router;\n"]}