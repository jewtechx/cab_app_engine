{"version":3,"file":"user.router.js","sourceRoot":"/","sources":["routes/auth/user.router.ts"],"names":[],"mappings":"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","sourcesContent":["import express, { Request, Response } from 'express';\nimport { IAppContext } from '../../types/app';\nimport setContext from '../../middlewares/context';\nimport { appContext, uploadAvatar } from '../../start';\nimport User from '../../models/user/user';\n\nconst router = express.Router();\n\nrouter.get('/me',setContext,async (req: Request & { user: any }, res: Response) => {\n  const user = await User.findOne({_id:req.user._id})\n  res.status(200).json(user)\n})\n\nrouter.get('/users',setContext,async (_:any, res: Response) => {\n  const user = await User.find()\n  res.status(200).json(user)\n})\n\nrouter.post('/register', async (req: Request, res: Response) => {\n  try {\n    const user = await appContext.services.UserService.registerUser(req.body);\n    res.status(201).json({ user });\n  } catch(e) {\n    res.status(500).send('error creating user');\n  }\n});\nrouter.post('/verify', async(req: Request, res: Response) => {\n  try {\n    const response = await appContext.services.UserService.verifyUser(req.body);\n    res.status(200).json(response);\n  } catch (e) {\n    res.status(500).send('error verifying user');\n  }\n});\nrouter.post('/forgotpassword', async(req: Request, res: Response) => {\n  try {\n    const response = await appContext.services.UserService.forgotPassword(req.body);\n    res.status(200).json(response);\n  } catch (e) {\n    res.status(500).send('error reseting password');\n  }\n});\nrouter.post('/resetpassword', async(req: Request, res: Response) => {\n  try {\n    const response = await appContext.services.UserService.resetPassword(req.body);\n    res.status(200).json(response);\n  } catch (e) {\n    res.status(500);\n  }\n});\nrouter.post('/login', async(req: Request, res: Response) => {\n  try {\n    const user = await appContext.services.UserService.loginUser(req.body);\n    res.status(200).json(user);\n  } catch (e) {\n    res.status(500);\n  }\n});\nrouter.put('/updateuser', setContext, async(req: Request & { user: any }, res: Response) => {\n  try {\n    const user = await appContext.services.UserService.updateUser(req.body, req.user._id);\n    res.status(200).json(user);\n  } catch (e) {\n    res.status(500);\n  }\n});\nrouter.delete('/deleteuser',setContext, async(req: Request & { user: any }, res: Response) => {\n  try {\n    const message = await appContext.services.UserService.deleteUser(req.user._id);\n    res.status(201).json(message);\n  } catch (e) {\n    res.status(500).json({ error: e });\n  }\n});\n\nrouter.post('/uploadprofilepicture', setContext, async (req: Request & { user: any, file: { path: string } }, res: Response) => {\n  try {\n    // const user = await User.findOne({ _id: req.user._id });\n\n    // if (!user || !user.verified) {\n    //   return res.status(500).send('User not verified');\n    // }\n\n    // uploadAvatar(req, res, async (err) => {\n    //   if (err) {\n    //     return res.status(500).send(err.message);\n    //   }\n\n    //   try {\n    //     // await user.updateOne({ $set: { profile: { avatar: req.file.path } } }, { new: true, upsert: true });\n    //     // await user.save();\n    //     res.status(201).send('Avatar uploaded');\n    //   } catch (e) {\n    //     res.status(500).send('Error updating user profile');\n    //   }\n      res.status(201).send('Avatar uploaded');\n    // });\n  } catch (e) {\n    res.status(500).send('Error processing request');\n  }\n});\n\n\nrouter.get('/getuserrating',setContext, async(req: Request & { user: any }, res: Response) => {\n  try {\n    const rating = await appContext.services.UserService.getUserRating(req.user._id);\n    res.status(201).json(rating);\n  } catch (e) {\n    res.status(500).send('error getting user rating');\n  }\n});\n\nexport default router;\n"]}