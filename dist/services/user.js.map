{"version":3,"file":"user.js","sourceRoot":"/","sources":["services/user.ts"],"names":[],"mappings":"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","sourcesContent":["import otp from \"otp-generator\"\nimport IService, { IAppContext } from '../types/app';\nimport { IUserAuth, IUserInput, IUserResetPasswordInput, IUserVerificationInput } from '../types/user/user';\nimport sendSms from '../utils/sms';\nimport log from '../utils/log';\n\nexport default class UserService extends IService {\n  constructor(context: IAppContext) {\n    super(context);\n  }\n\n  // registers user\n  async registerUser(input:{phoneNumber:string}){\n    try {\n      const {phoneNumber} = input\n      const _user = await this.models.User.findOne({ phoneNumber});\n      if (_user) throw new Error('User already exists');\n\n      const user = new this.models.User({phoneNumber});\n      await user.save();\n\n      await sendSms(phoneNumber,`This is your cab app verification code:${otp}. Thank you for signing up`)\n\n      return user\n      \n    } catch (e) {\n      throw new Error(`Error creating new user: ${e}`);\n    }\n  }\n\n  //verifies user\n  async verifyUser(VerifyUserInput: IUserVerificationInput): Promise<boolean> {\n    const { id, verificationCode } = VerifyUserInput;\n    try {\n      // Find the user by Id\n      const user = await this.authenticate_user(id)\n      console.log(user)\n      // Check if the user is already verified\n      if (user.verified) {\n        throw new Error('User is already verified');\n      }\n\n      // Check if verificationCode matches\n      if (user.verificationCode !== verificationCode) {\n        throw new Error('Invalid verification code');\n      }\n\n      // Set verified to true and save user\n      user.verified = true;\n      user.verificationCode = null\n      await user.save();\n\n      return true;\n    } catch (e) {\n      throw new Error(`Error validating user: ${e}`);\n    }\n  }\n\n  // sends password reset code to user's email\n  async forgotPassword(ForgotPasswordInput: { phoneNumber: string }) {\n    const { phoneNumber } = ForgotPasswordInput;\n\n    const user = await this.models.User.findOne({ phoneNumber });\n\n    if (!user) {\n      throw new Error('user not found');\n    }\n\n    if (!user.verified) {\n      throw new Error('user is not verified');\n    }\n\n    const passwordResetCode = otp.generate(4,{upperCaseAlphabets:false,specialChars:false,lowerCaseAlphabets:false});\n\n    user.passwordResetCode = passwordResetCode;\n\n    await user.save();\n\n    await sendSms(phoneNumber,`This is your cab app password reset code:${otp}`)\n\n    log.debug(`Password reset code sent to ${user.phoneNumber}`);\n\n    const message = 'password reset code sent';\n    return message;\n  }\n\n  // resets user's password to new password from email\n  async resetPassword(ResetPasswordInput: IUserResetPasswordInput) {\n    const { id, passwordResetCode, newPassword } = ResetPasswordInput;\n\n    const user = await this.authenticate_user(id)\n    console.log(passwordResetCode)\n    console.log(user.passwordResetCode)\n\n    if (!user || user.passwordResetCode !== passwordResetCode) {\n      throw new Error('Could not reset password');\n    }\n\n    user.passwordResetCode = null;\n\n    user.password = newPassword;\n\n    await user.save();  \n\n    const message = 'Successfully updated password';\n    return message;\n  }\n\n  // login user\n  async loginUser(LoginUserInput: any) {\n    const { phoneNumber, password } = LoginUserInput;\n\n    const user = await this.models.User.findOne({ phoneNumber });\n    if (!user) {\n      throw new Error('user not found');\n    }\n\n    try {\n      const valid = await user.validatePassword(password);\n      if (!valid) {\n        throw new Error('password incorrect');\n      }\n    } catch (e) {\n      throw new Error(e);\n    }\n\n    return user;\n  }\n\n  // updates user details\n  async updateUser(UpdateUserInput: any, userId: any) {\n    try {\n      const user = await this.authenticate_user(userId)\n  \n      if ('rating' in UpdateUserInput) {\n        user.rating = UpdateUserInput.rating;\n      } else {\n        if (user._id.toString() !== userId.toString()) {\n          throw new Error(`Unauthorized: Cannot update another user's details`);\n        }\n  \n        for (const key in UpdateUserInput) {\n          if (key !== 'rating') {\n            user[key] = UpdateUserInput[key];\n          }\n        }\n      }\n  \n      await user.save();\n  \n      return user;\n    } catch (e) {\n      throw new Error(`Error updating user: ${e.message}`);\n    }\n  }\n  \n  //update profile picture\n  async updateProfilePicture(userId:any){\n    const user = await this.authenticate_user(userId)\n\n    // avatar is from standalone file upload server\n    const avatars = await this.models.Image.find({useId:user._id})\n\n    if(!avatars){\n      throw new Error(`No avatar found for this user`)\n    }\n\n    const avatar = [...avatars].reverse()\n    console.log(avatar)\n    const {path} = avatar[0]\n\n    await user.updateOne({\n      $set : {\n        profile : {avatar:path}\n      }\n    },{new:true,upsert:true})\n\n    await user.save()\n\n    return avatar[0]\n  }\n\n  // deletes user account\n  async deleteUser(id: any) {\n    const user = await this.authenticate_user(id)\n\n    try {\n      await this.models.User.findByIdAndDelete(id);\n      return `Deleted user successfully`;\n    } catch (e) {\n      throw new Error(`Error deleting user`);\n    }\n  }\n\n  // getting user rating\n  async getUserRating(userId: any) {\n    try {\n      const user = await this.models.User.findOne({_id:userId});\n\n      if (user.rating.length === 0) {\n        return {\n          averageRating: 0,\n          totalRatings: 0,\n        };\n      }\n\n      const totalScore = user.rating.reduce((sum: any, rating: any) => sum + rating.score, 0);\n      const averageRating = totalScore / user.rating.length;\n\n      return {\n        averageRating,\n        totalRatings: user.rating.length,\n      };\n    } catch (error) {\n      console.error('Error fetching ratings for user:', error);\n      throw new Error('Failed to fetch ratings');\n    }\n  }\n}\n"]}