{"version":3,"file":"token.js","sourceRoot":"/","sources":["utils/token.ts"],"names":[],"mappings":";;;;AAAA,wEAA+B;AAE/B,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAA;AACvC,SAAsB,OAAO,CAAC,MAAc,EAAE,OAAyB;;QACrE,OAAO,sBAAG,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,oBAC5B,CAAC,OAAO,IAAI,OAAO,CAAC,EACvB,CAAC;IACL,CAAC;CAAA;AAJD,0BAIC;AAED,SAAgB,KAAK,KAAC,CAAC,AAAF;AAArB,sBAAqB;AAAC,SAAS,CAAI,KAAK,EAAE,MAAM,CAAC,CAAA;AAAE,OAAO,GAAC,CAAC,GAAC;IAC3D,GAAG,EAAC;QACF,KAAK,EAAC,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAM;QACjD,MAAM,EAAC,OAAO;KACf,EAAC,KAAK,CAAE,CAAC;QACR,MAAM,CAAC,CAAC;IACV,CAAC;CACF,CAAA","sourcesContent":["import jwt from 'jsonwebtoken';\n\nconst jwt_token = process.env.JWT_TOKEN\nexport async function signJwt(object: object, options?: jwt.SignOptions): Promise<string> {\n  return jwt.sign(object, jwt_token, {\n    ...(options && options)\n  });\n}\n\nexport function async verifyJwt<T>(token: string): Promise<T>{\n  try {\n    const decoded = jwt.verify(token, jwt_token) as T;\n    return decoded;\n  } catch (e) {\n    throw e;\n  }\n}\n"]}