{"version":3,"file":"index.js","sourceRoot":"/","sources":["start/index.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;AAGb,8DAA8B;AAE9B,wDAAwB;AACxB,6CAAmC;AAEnC,+DAA+B;AAC/B,mEAAuC;AACvC,+DAA+B;AAC/B,+DAA+B;AAElB,QAAA,UAAU,GAAgB,EAAE,CAAC;AAE1C,SAA8B,KAAK,CAAC,MAAc;;QAChD,IAAI;YACF,yBAAyB;YAEzB,oBAAoB;YACpB,kBAAU,CAAC,MAAM,GAAG,MAAM,IAAA,gBAAM,EAAC,MAAM,CAAC,EAAE,CAAC,CAAA;YAC3C,kBAAU,CAAC,QAAQ,GAAG,MAAM,IAAA,kBAAY,EAAC,kBAAU,CAAC,CAAA;YAEpD,iBAAiB;YACjB,MAAM,GAAG,GAAG,IAAA,iBAAO,GAAE,CAAC;YACtB,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAG5C,GAAG,CAAC,GAAG,CACL,IAAA,cAAI,GAAoB,EACxB,IAAA,kBAAI,GAAE,CACP,CAAC;YAEN,qBAAqB;YACrB,GAAG,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;gBACjC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;YAEH,QAAQ;YACR,GAAG,CAAC,GAAG,CAAC,gBAAM,CAAC,CAAA;YAEf,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE;gBAC/B,aAAG,CAAC,IAAI,CACN,oCAAoC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CACtD,CAAC;YACJ,CAAC,CAAC,CAAC;SACJ;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACpB;IACH,CAAC;CAAA;AAlCD,wBAkCC","sourcesContent":["\"use strict\";\n\nimport { Config } from \"../config\";\nimport express from \"express\";\nimport { IAppContext } from \"../types/app\";\nimport cors from \"cors\";\nimport { json } from \"body-parser\";\n\nimport initDb from \"../models\";\nimport initServices from \"../services\";\nimport log from \"../utils/log\";\nimport router from \"../routes\";\n\nexport const appContext: IAppContext = {};\n\nexport default async function start(config: Config) {\n  try {\n    // setting global context\n\n    // initialize models\n    appContext.models = await initDb(config.db)\n    appContext.services = await initServices(appContext)\n\n    // initialize app\n    const app = express();\n    app.use(express.urlencoded({ extended: true }));\n\n    \n        app.use(\n          cors<cors.CorsRequest>(),\n          json(),\n        );\n\n    //server health check\n    app.use(\"/healthcheck\", (_, res) => {\n      res.status(200).send(\"All is green!!!\");\n    });\n\n    //router\n    app.use(router)\n\n    app.listen(config.app.port, () => {\n      log.info(\n        `Server ready at http://localhost:${config.app.port}`\n      );\n    }); \n  } catch (err) {\n    console.error(err);\n  }\n}"]}