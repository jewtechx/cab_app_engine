{"version":3,"file":"index.js","sourceRoot":"/","sources":["start/index.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { Config } from \"../config\";\nimport express from \"express\";\nimport { IAppContext } from \"../types/app\";\nimport cors from \"cors\";\nimport { json } from \"body-parser\";\nimport cookieParser from \"cookie-parser\"\nimport multer from 'multer'\nimport path from 'path';\nimport initDb from \"../models\";\nimport initServices from \"../services\";\nimport log from \"../utils/log\";\nimport router from \"../routes\";\nimport mongoose from \"mongoose\";\nimport User from \"../models/user/user\";\n\nexport const appContext: IAppContext = {};\nexport let uploadAvatar;\n\nexport default async function start(config: Config) {\n  try {\n    // setting global context\n\n    // initialize models\n    appContext.models = await initDb(config.db)\n    appContext.services = await initServices(appContext)\n\n    // initialize app\n    const app = express();\n    app.use(express.urlencoded({ extended: true }));\n\n         // cors middleware\n        app.use(\n          cors<cors.CorsRequest>(),\n          json(),\n        );\n\n        // cookie middleware\n        app.use(cookieParser())\n\n    //server health check\n    app.use(\"/healthcheck\", (_, res) => {\n      res.status(200).send(\"All is green!!!\");\n    });\n\n    //clear database\n    app.get('/clearDB',async (_,res) => {\n      await User.deleteMany()\n      res.status(200).send('database cleared')\n    })\n\n    //router\n    app.use(router)\n\n    // file uploads\n    const avatarStorage = multer.diskStorage({\n      destination: path.join(__dirname, '../uploads/avatars'),\n      filename: function (req, file, cb) {\n        cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname));\n      }\n    });\n    \n    function checkFileType(file, cb) {\n      const filetypes = /jpeg|jpg|png/;\n      const extname = filetypes.test(path.extname(file.originalname).toLowerCase());\n      const mimetype = filetypes.test(file.mimetype);\n    \n      if (extname && mimetype) {\n        return cb(null, true);\n      } else {\n        cb('Error: Images only! (jpeg, jpg, png)');\n      }\n    }\n\n    uploadAvatar = multer({\n      storage: avatarStorage,\n      limits: { fileSize: 10000000 }, // Limit file size to 10MB\n      fileFilter: function (req, file, cb) {\n        checkFileType(file, cb);\n      }\n    }).single('avatar');\n\n    app.use(express.static(path.join(__dirname, '..', 'public')));\n    app.get('/uploadfile', (req, res) => {\n      res.status(200).sendFile(path.join(__dirname, '..', 'public','upload.html'));\n    });\n\n    // start app\n    app.listen(config.app.port, () => {\n      log.info(\n        `Server ready at http://localhost:${config.app.port}`\n      );\n    }); \n  } catch (err) {\n    console.error(err);\n  }\n}"]}